// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2025 11:51:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AES_Top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AES_Top_vlg_sample_tst(
	Load_Data,
	Load_Key,
	clk,
	in_data,
	rst,
	sampler_tx
);
input  Load_Data;
input  Load_Key;
input  clk;
input [127:0] in_data;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(Load_Data or Load_Key or clk or in_data or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AES_Top_vlg_check_tst (
	CTValid,
	CipherText,
	Ready_new_input,
	sampler_rx
);
input  CTValid;
input [127:0] CipherText;
input  Ready_new_input;
input sampler_rx;

reg  CTValid_expected;
reg [127:0] CipherText_expected;
reg  Ready_new_input_expected;

reg  CTValid_prev;
reg [127:0] CipherText_prev;
reg  Ready_new_input_prev;

reg  CTValid_expected_prev;
reg [127:0] CipherText_expected_prev;
reg  Ready_new_input_expected_prev;

reg  last_CTValid_exp;
reg [127:0] last_CipherText_exp;
reg  last_Ready_new_input_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	CTValid_prev = CTValid;
	CipherText_prev = CipherText;
	Ready_new_input_prev = Ready_new_input;
end

// update expected /o prevs

always @(trigger)
begin
	CTValid_expected_prev = CTValid_expected;
	CipherText_expected_prev = CipherText_expected;
	Ready_new_input_expected_prev = Ready_new_input_expected;
end



// expected Ready_new_input
initial
begin
	Ready_new_input_expected = 1'bX;
end 

// expected CTValid
initial
begin
	CTValid_expected = 1'bX;
end 
// expected CipherText[ 127 ]
initial
begin
	CipherText_expected[127] = 1'bX;
end 
// expected CipherText[ 126 ]
initial
begin
	CipherText_expected[126] = 1'bX;
end 
// expected CipherText[ 125 ]
initial
begin
	CipherText_expected[125] = 1'bX;
end 
// expected CipherText[ 124 ]
initial
begin
	CipherText_expected[124] = 1'bX;
end 
// expected CipherText[ 123 ]
initial
begin
	CipherText_expected[123] = 1'bX;
end 
// expected CipherText[ 122 ]
initial
begin
	CipherText_expected[122] = 1'bX;
end 
// expected CipherText[ 121 ]
initial
begin
	CipherText_expected[121] = 1'bX;
end 
// expected CipherText[ 120 ]
initial
begin
	CipherText_expected[120] = 1'bX;
end 
// expected CipherText[ 119 ]
initial
begin
	CipherText_expected[119] = 1'bX;
end 
// expected CipherText[ 118 ]
initial
begin
	CipherText_expected[118] = 1'bX;
end 
// expected CipherText[ 117 ]
initial
begin
	CipherText_expected[117] = 1'bX;
end 
// expected CipherText[ 116 ]
initial
begin
	CipherText_expected[116] = 1'bX;
end 
// expected CipherText[ 115 ]
initial
begin
	CipherText_expected[115] = 1'bX;
end 
// expected CipherText[ 114 ]
initial
begin
	CipherText_expected[114] = 1'bX;
end 
// expected CipherText[ 113 ]
initial
begin
	CipherText_expected[113] = 1'bX;
end 
// expected CipherText[ 112 ]
initial
begin
	CipherText_expected[112] = 1'bX;
end 
// expected CipherText[ 111 ]
initial
begin
	CipherText_expected[111] = 1'bX;
end 
// expected CipherText[ 110 ]
initial
begin
	CipherText_expected[110] = 1'bX;
end 
// expected CipherText[ 109 ]
initial
begin
	CipherText_expected[109] = 1'bX;
end 
// expected CipherText[ 108 ]
initial
begin
	CipherText_expected[108] = 1'bX;
end 
// expected CipherText[ 107 ]
initial
begin
	CipherText_expected[107] = 1'bX;
end 
// expected CipherText[ 106 ]
initial
begin
	CipherText_expected[106] = 1'bX;
end 
// expected CipherText[ 105 ]
initial
begin
	CipherText_expected[105] = 1'bX;
end 
// expected CipherText[ 104 ]
initial
begin
	CipherText_expected[104] = 1'bX;
end 
// expected CipherText[ 103 ]
initial
begin
	CipherText_expected[103] = 1'bX;
end 
// expected CipherText[ 102 ]
initial
begin
	CipherText_expected[102] = 1'bX;
end 
// expected CipherText[ 101 ]
initial
begin
	CipherText_expected[101] = 1'bX;
end 
// expected CipherText[ 100 ]
initial
begin
	CipherText_expected[100] = 1'bX;
end 
// expected CipherText[ 99 ]
initial
begin
	CipherText_expected[99] = 1'bX;
end 
// expected CipherText[ 98 ]
initial
begin
	CipherText_expected[98] = 1'bX;
end 
// expected CipherText[ 97 ]
initial
begin
	CipherText_expected[97] = 1'bX;
end 
// expected CipherText[ 96 ]
initial
begin
	CipherText_expected[96] = 1'bX;
end 
// expected CipherText[ 95 ]
initial
begin
	CipherText_expected[95] = 1'bX;
end 
// expected CipherText[ 94 ]
initial
begin
	CipherText_expected[94] = 1'bX;
end 
// expected CipherText[ 93 ]
initial
begin
	CipherText_expected[93] = 1'bX;
end 
// expected CipherText[ 92 ]
initial
begin
	CipherText_expected[92] = 1'bX;
end 
// expected CipherText[ 91 ]
initial
begin
	CipherText_expected[91] = 1'bX;
end 
// expected CipherText[ 90 ]
initial
begin
	CipherText_expected[90] = 1'bX;
end 
// expected CipherText[ 89 ]
initial
begin
	CipherText_expected[89] = 1'bX;
end 
// expected CipherText[ 88 ]
initial
begin
	CipherText_expected[88] = 1'bX;
end 
// expected CipherText[ 87 ]
initial
begin
	CipherText_expected[87] = 1'bX;
end 
// expected CipherText[ 86 ]
initial
begin
	CipherText_expected[86] = 1'bX;
end 
// expected CipherText[ 85 ]
initial
begin
	CipherText_expected[85] = 1'bX;
end 
// expected CipherText[ 84 ]
initial
begin
	CipherText_expected[84] = 1'bX;
end 
// expected CipherText[ 83 ]
initial
begin
	CipherText_expected[83] = 1'bX;
end 
// expected CipherText[ 82 ]
initial
begin
	CipherText_expected[82] = 1'bX;
end 
// expected CipherText[ 81 ]
initial
begin
	CipherText_expected[81] = 1'bX;
end 
// expected CipherText[ 80 ]
initial
begin
	CipherText_expected[80] = 1'bX;
end 
// expected CipherText[ 79 ]
initial
begin
	CipherText_expected[79] = 1'bX;
end 
// expected CipherText[ 78 ]
initial
begin
	CipherText_expected[78] = 1'bX;
end 
// expected CipherText[ 77 ]
initial
begin
	CipherText_expected[77] = 1'bX;
end 
// expected CipherText[ 76 ]
initial
begin
	CipherText_expected[76] = 1'bX;
end 
// expected CipherText[ 75 ]
initial
begin
	CipherText_expected[75] = 1'bX;
end 
// expected CipherText[ 74 ]
initial
begin
	CipherText_expected[74] = 1'bX;
end 
// expected CipherText[ 73 ]
initial
begin
	CipherText_expected[73] = 1'bX;
end 
// expected CipherText[ 72 ]
initial
begin
	CipherText_expected[72] = 1'bX;
end 
// expected CipherText[ 71 ]
initial
begin
	CipherText_expected[71] = 1'bX;
end 
// expected CipherText[ 70 ]
initial
begin
	CipherText_expected[70] = 1'bX;
end 
// expected CipherText[ 69 ]
initial
begin
	CipherText_expected[69] = 1'bX;
end 
// expected CipherText[ 68 ]
initial
begin
	CipherText_expected[68] = 1'bX;
end 
// expected CipherText[ 67 ]
initial
begin
	CipherText_expected[67] = 1'bX;
end 
// expected CipherText[ 66 ]
initial
begin
	CipherText_expected[66] = 1'bX;
end 
// expected CipherText[ 65 ]
initial
begin
	CipherText_expected[65] = 1'bX;
end 
// expected CipherText[ 64 ]
initial
begin
	CipherText_expected[64] = 1'bX;
end 
// expected CipherText[ 63 ]
initial
begin
	CipherText_expected[63] = 1'bX;
end 
// expected CipherText[ 62 ]
initial
begin
	CipherText_expected[62] = 1'bX;
end 
// expected CipherText[ 61 ]
initial
begin
	CipherText_expected[61] = 1'bX;
end 
// expected CipherText[ 60 ]
initial
begin
	CipherText_expected[60] = 1'bX;
end 
// expected CipherText[ 59 ]
initial
begin
	CipherText_expected[59] = 1'bX;
end 
// expected CipherText[ 58 ]
initial
begin
	CipherText_expected[58] = 1'bX;
end 
// expected CipherText[ 57 ]
initial
begin
	CipherText_expected[57] = 1'bX;
end 
// expected CipherText[ 56 ]
initial
begin
	CipherText_expected[56] = 1'bX;
end 
// expected CipherText[ 55 ]
initial
begin
	CipherText_expected[55] = 1'bX;
end 
// expected CipherText[ 54 ]
initial
begin
	CipherText_expected[54] = 1'bX;
end 
// expected CipherText[ 53 ]
initial
begin
	CipherText_expected[53] = 1'bX;
end 
// expected CipherText[ 52 ]
initial
begin
	CipherText_expected[52] = 1'bX;
end 
// expected CipherText[ 51 ]
initial
begin
	CipherText_expected[51] = 1'bX;
end 
// expected CipherText[ 50 ]
initial
begin
	CipherText_expected[50] = 1'bX;
end 
// expected CipherText[ 49 ]
initial
begin
	CipherText_expected[49] = 1'bX;
end 
// expected CipherText[ 48 ]
initial
begin
	CipherText_expected[48] = 1'bX;
end 
// expected CipherText[ 47 ]
initial
begin
	CipherText_expected[47] = 1'bX;
end 
// expected CipherText[ 46 ]
initial
begin
	CipherText_expected[46] = 1'bX;
end 
// expected CipherText[ 45 ]
initial
begin
	CipherText_expected[45] = 1'bX;
end 
// expected CipherText[ 44 ]
initial
begin
	CipherText_expected[44] = 1'bX;
end 
// expected CipherText[ 43 ]
initial
begin
	CipherText_expected[43] = 1'bX;
end 
// expected CipherText[ 42 ]
initial
begin
	CipherText_expected[42] = 1'bX;
end 
// expected CipherText[ 41 ]
initial
begin
	CipherText_expected[41] = 1'bX;
end 
// expected CipherText[ 40 ]
initial
begin
	CipherText_expected[40] = 1'bX;
end 
// expected CipherText[ 39 ]
initial
begin
	CipherText_expected[39] = 1'bX;
end 
// expected CipherText[ 38 ]
initial
begin
	CipherText_expected[38] = 1'bX;
end 
// expected CipherText[ 37 ]
initial
begin
	CipherText_expected[37] = 1'bX;
end 
// expected CipherText[ 36 ]
initial
begin
	CipherText_expected[36] = 1'bX;
end 
// expected CipherText[ 35 ]
initial
begin
	CipherText_expected[35] = 1'bX;
end 
// expected CipherText[ 34 ]
initial
begin
	CipherText_expected[34] = 1'bX;
end 
// expected CipherText[ 33 ]
initial
begin
	CipherText_expected[33] = 1'bX;
end 
// expected CipherText[ 32 ]
initial
begin
	CipherText_expected[32] = 1'bX;
end 
// expected CipherText[ 31 ]
initial
begin
	CipherText_expected[31] = 1'bX;
end 
// expected CipherText[ 30 ]
initial
begin
	CipherText_expected[30] = 1'bX;
end 
// expected CipherText[ 29 ]
initial
begin
	CipherText_expected[29] = 1'bX;
end 
// expected CipherText[ 28 ]
initial
begin
	CipherText_expected[28] = 1'bX;
end 
// expected CipherText[ 27 ]
initial
begin
	CipherText_expected[27] = 1'bX;
end 
// expected CipherText[ 26 ]
initial
begin
	CipherText_expected[26] = 1'bX;
end 
// expected CipherText[ 25 ]
initial
begin
	CipherText_expected[25] = 1'bX;
end 
// expected CipherText[ 24 ]
initial
begin
	CipherText_expected[24] = 1'bX;
end 
// expected CipherText[ 23 ]
initial
begin
	CipherText_expected[23] = 1'bX;
end 
// expected CipherText[ 22 ]
initial
begin
	CipherText_expected[22] = 1'bX;
end 
// expected CipherText[ 21 ]
initial
begin
	CipherText_expected[21] = 1'bX;
end 
// expected CipherText[ 20 ]
initial
begin
	CipherText_expected[20] = 1'bX;
end 
// expected CipherText[ 19 ]
initial
begin
	CipherText_expected[19] = 1'bX;
end 
// expected CipherText[ 18 ]
initial
begin
	CipherText_expected[18] = 1'bX;
end 
// expected CipherText[ 17 ]
initial
begin
	CipherText_expected[17] = 1'bX;
end 
// expected CipherText[ 16 ]
initial
begin
	CipherText_expected[16] = 1'bX;
end 
// expected CipherText[ 15 ]
initial
begin
	CipherText_expected[15] = 1'bX;
end 
// expected CipherText[ 14 ]
initial
begin
	CipherText_expected[14] = 1'bX;
end 
// expected CipherText[ 13 ]
initial
begin
	CipherText_expected[13] = 1'bX;
end 
// expected CipherText[ 12 ]
initial
begin
	CipherText_expected[12] = 1'bX;
end 
// expected CipherText[ 11 ]
initial
begin
	CipherText_expected[11] = 1'bX;
end 
// expected CipherText[ 10 ]
initial
begin
	CipherText_expected[10] = 1'bX;
end 
// expected CipherText[ 9 ]
initial
begin
	CipherText_expected[9] = 1'bX;
end 
// expected CipherText[ 8 ]
initial
begin
	CipherText_expected[8] = 1'bX;
end 
// expected CipherText[ 7 ]
initial
begin
	CipherText_expected[7] = 1'bX;
end 
// expected CipherText[ 6 ]
initial
begin
	CipherText_expected[6] = 1'bX;
end 
// expected CipherText[ 5 ]
initial
begin
	CipherText_expected[5] = 1'bX;
end 
// expected CipherText[ 4 ]
initial
begin
	CipherText_expected[4] = 1'bX;
end 
// expected CipherText[ 3 ]
initial
begin
	CipherText_expected[3] = 1'bX;
end 
// expected CipherText[ 2 ]
initial
begin
	CipherText_expected[2] = 1'bX;
end 
// expected CipherText[ 1 ]
initial
begin
	CipherText_expected[1] = 1'bX;
end 
// expected CipherText[ 0 ]
initial
begin
	CipherText_expected[0] = 1'bX;
end 
// generate trigger
always @(CTValid_expected or CTValid or CipherText_expected or CipherText or Ready_new_input_expected or Ready_new_input)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CTValid = %b | expected CipherText = %b | expected Ready_new_input = %b | ",CTValid_expected_prev,CipherText_expected_prev,Ready_new_input_expected_prev);
	$display("| real CTValid = %b | real CipherText = %b | real Ready_new_input = %b | ",CTValid_prev,CipherText_prev,Ready_new_input_prev);
`endif
	if (
		( CTValid_expected_prev !== 1'bx ) && ( CTValid_prev !== CTValid_expected_prev )
		&& ((CTValid_expected_prev !== last_CTValid_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CTValid :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CTValid_expected_prev);
		$display ("     Real value = %b", CTValid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CTValid_exp = CTValid_expected_prev;
	end
	if (
		( CipherText_expected_prev[0] !== 1'bx ) && ( CipherText_prev[0] !== CipherText_expected_prev[0] )
		&& ((CipherText_expected_prev[0] !== last_CipherText_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[0] = CipherText_expected_prev[0];
	end
	if (
		( CipherText_expected_prev[1] !== 1'bx ) && ( CipherText_prev[1] !== CipherText_expected_prev[1] )
		&& ((CipherText_expected_prev[1] !== last_CipherText_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[1] = CipherText_expected_prev[1];
	end
	if (
		( CipherText_expected_prev[2] !== 1'bx ) && ( CipherText_prev[2] !== CipherText_expected_prev[2] )
		&& ((CipherText_expected_prev[2] !== last_CipherText_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[2] = CipherText_expected_prev[2];
	end
	if (
		( CipherText_expected_prev[3] !== 1'bx ) && ( CipherText_prev[3] !== CipherText_expected_prev[3] )
		&& ((CipherText_expected_prev[3] !== last_CipherText_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[3] = CipherText_expected_prev[3];
	end
	if (
		( CipherText_expected_prev[4] !== 1'bx ) && ( CipherText_prev[4] !== CipherText_expected_prev[4] )
		&& ((CipherText_expected_prev[4] !== last_CipherText_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[4] = CipherText_expected_prev[4];
	end
	if (
		( CipherText_expected_prev[5] !== 1'bx ) && ( CipherText_prev[5] !== CipherText_expected_prev[5] )
		&& ((CipherText_expected_prev[5] !== last_CipherText_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[5] = CipherText_expected_prev[5];
	end
	if (
		( CipherText_expected_prev[6] !== 1'bx ) && ( CipherText_prev[6] !== CipherText_expected_prev[6] )
		&& ((CipherText_expected_prev[6] !== last_CipherText_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[6] = CipherText_expected_prev[6];
	end
	if (
		( CipherText_expected_prev[7] !== 1'bx ) && ( CipherText_prev[7] !== CipherText_expected_prev[7] )
		&& ((CipherText_expected_prev[7] !== last_CipherText_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[7] = CipherText_expected_prev[7];
	end
	if (
		( CipherText_expected_prev[8] !== 1'bx ) && ( CipherText_prev[8] !== CipherText_expected_prev[8] )
		&& ((CipherText_expected_prev[8] !== last_CipherText_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[8] = CipherText_expected_prev[8];
	end
	if (
		( CipherText_expected_prev[9] !== 1'bx ) && ( CipherText_prev[9] !== CipherText_expected_prev[9] )
		&& ((CipherText_expected_prev[9] !== last_CipherText_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[9] = CipherText_expected_prev[9];
	end
	if (
		( CipherText_expected_prev[10] !== 1'bx ) && ( CipherText_prev[10] !== CipherText_expected_prev[10] )
		&& ((CipherText_expected_prev[10] !== last_CipherText_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[10] = CipherText_expected_prev[10];
	end
	if (
		( CipherText_expected_prev[11] !== 1'bx ) && ( CipherText_prev[11] !== CipherText_expected_prev[11] )
		&& ((CipherText_expected_prev[11] !== last_CipherText_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[11] = CipherText_expected_prev[11];
	end
	if (
		( CipherText_expected_prev[12] !== 1'bx ) && ( CipherText_prev[12] !== CipherText_expected_prev[12] )
		&& ((CipherText_expected_prev[12] !== last_CipherText_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[12] = CipherText_expected_prev[12];
	end
	if (
		( CipherText_expected_prev[13] !== 1'bx ) && ( CipherText_prev[13] !== CipherText_expected_prev[13] )
		&& ((CipherText_expected_prev[13] !== last_CipherText_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[13] = CipherText_expected_prev[13];
	end
	if (
		( CipherText_expected_prev[14] !== 1'bx ) && ( CipherText_prev[14] !== CipherText_expected_prev[14] )
		&& ((CipherText_expected_prev[14] !== last_CipherText_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[14] = CipherText_expected_prev[14];
	end
	if (
		( CipherText_expected_prev[15] !== 1'bx ) && ( CipherText_prev[15] !== CipherText_expected_prev[15] )
		&& ((CipherText_expected_prev[15] !== last_CipherText_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[15] = CipherText_expected_prev[15];
	end
	if (
		( CipherText_expected_prev[16] !== 1'bx ) && ( CipherText_prev[16] !== CipherText_expected_prev[16] )
		&& ((CipherText_expected_prev[16] !== last_CipherText_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[16] = CipherText_expected_prev[16];
	end
	if (
		( CipherText_expected_prev[17] !== 1'bx ) && ( CipherText_prev[17] !== CipherText_expected_prev[17] )
		&& ((CipherText_expected_prev[17] !== last_CipherText_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[17] = CipherText_expected_prev[17];
	end
	if (
		( CipherText_expected_prev[18] !== 1'bx ) && ( CipherText_prev[18] !== CipherText_expected_prev[18] )
		&& ((CipherText_expected_prev[18] !== last_CipherText_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[18] = CipherText_expected_prev[18];
	end
	if (
		( CipherText_expected_prev[19] !== 1'bx ) && ( CipherText_prev[19] !== CipherText_expected_prev[19] )
		&& ((CipherText_expected_prev[19] !== last_CipherText_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[19] = CipherText_expected_prev[19];
	end
	if (
		( CipherText_expected_prev[20] !== 1'bx ) && ( CipherText_prev[20] !== CipherText_expected_prev[20] )
		&& ((CipherText_expected_prev[20] !== last_CipherText_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[20] = CipherText_expected_prev[20];
	end
	if (
		( CipherText_expected_prev[21] !== 1'bx ) && ( CipherText_prev[21] !== CipherText_expected_prev[21] )
		&& ((CipherText_expected_prev[21] !== last_CipherText_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[21] = CipherText_expected_prev[21];
	end
	if (
		( CipherText_expected_prev[22] !== 1'bx ) && ( CipherText_prev[22] !== CipherText_expected_prev[22] )
		&& ((CipherText_expected_prev[22] !== last_CipherText_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[22] = CipherText_expected_prev[22];
	end
	if (
		( CipherText_expected_prev[23] !== 1'bx ) && ( CipherText_prev[23] !== CipherText_expected_prev[23] )
		&& ((CipherText_expected_prev[23] !== last_CipherText_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[23] = CipherText_expected_prev[23];
	end
	if (
		( CipherText_expected_prev[24] !== 1'bx ) && ( CipherText_prev[24] !== CipherText_expected_prev[24] )
		&& ((CipherText_expected_prev[24] !== last_CipherText_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[24] = CipherText_expected_prev[24];
	end
	if (
		( CipherText_expected_prev[25] !== 1'bx ) && ( CipherText_prev[25] !== CipherText_expected_prev[25] )
		&& ((CipherText_expected_prev[25] !== last_CipherText_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[25] = CipherText_expected_prev[25];
	end
	if (
		( CipherText_expected_prev[26] !== 1'bx ) && ( CipherText_prev[26] !== CipherText_expected_prev[26] )
		&& ((CipherText_expected_prev[26] !== last_CipherText_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[26] = CipherText_expected_prev[26];
	end
	if (
		( CipherText_expected_prev[27] !== 1'bx ) && ( CipherText_prev[27] !== CipherText_expected_prev[27] )
		&& ((CipherText_expected_prev[27] !== last_CipherText_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[27] = CipherText_expected_prev[27];
	end
	if (
		( CipherText_expected_prev[28] !== 1'bx ) && ( CipherText_prev[28] !== CipherText_expected_prev[28] )
		&& ((CipherText_expected_prev[28] !== last_CipherText_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[28] = CipherText_expected_prev[28];
	end
	if (
		( CipherText_expected_prev[29] !== 1'bx ) && ( CipherText_prev[29] !== CipherText_expected_prev[29] )
		&& ((CipherText_expected_prev[29] !== last_CipherText_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[29] = CipherText_expected_prev[29];
	end
	if (
		( CipherText_expected_prev[30] !== 1'bx ) && ( CipherText_prev[30] !== CipherText_expected_prev[30] )
		&& ((CipherText_expected_prev[30] !== last_CipherText_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[30] = CipherText_expected_prev[30];
	end
	if (
		( CipherText_expected_prev[31] !== 1'bx ) && ( CipherText_prev[31] !== CipherText_expected_prev[31] )
		&& ((CipherText_expected_prev[31] !== last_CipherText_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[31] = CipherText_expected_prev[31];
	end
	if (
		( CipherText_expected_prev[32] !== 1'bx ) && ( CipherText_prev[32] !== CipherText_expected_prev[32] )
		&& ((CipherText_expected_prev[32] !== last_CipherText_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[32] = CipherText_expected_prev[32];
	end
	if (
		( CipherText_expected_prev[33] !== 1'bx ) && ( CipherText_prev[33] !== CipherText_expected_prev[33] )
		&& ((CipherText_expected_prev[33] !== last_CipherText_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[33] = CipherText_expected_prev[33];
	end
	if (
		( CipherText_expected_prev[34] !== 1'bx ) && ( CipherText_prev[34] !== CipherText_expected_prev[34] )
		&& ((CipherText_expected_prev[34] !== last_CipherText_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[34] = CipherText_expected_prev[34];
	end
	if (
		( CipherText_expected_prev[35] !== 1'bx ) && ( CipherText_prev[35] !== CipherText_expected_prev[35] )
		&& ((CipherText_expected_prev[35] !== last_CipherText_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[35] = CipherText_expected_prev[35];
	end
	if (
		( CipherText_expected_prev[36] !== 1'bx ) && ( CipherText_prev[36] !== CipherText_expected_prev[36] )
		&& ((CipherText_expected_prev[36] !== last_CipherText_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[36] = CipherText_expected_prev[36];
	end
	if (
		( CipherText_expected_prev[37] !== 1'bx ) && ( CipherText_prev[37] !== CipherText_expected_prev[37] )
		&& ((CipherText_expected_prev[37] !== last_CipherText_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[37] = CipherText_expected_prev[37];
	end
	if (
		( CipherText_expected_prev[38] !== 1'bx ) && ( CipherText_prev[38] !== CipherText_expected_prev[38] )
		&& ((CipherText_expected_prev[38] !== last_CipherText_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[38] = CipherText_expected_prev[38];
	end
	if (
		( CipherText_expected_prev[39] !== 1'bx ) && ( CipherText_prev[39] !== CipherText_expected_prev[39] )
		&& ((CipherText_expected_prev[39] !== last_CipherText_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[39] = CipherText_expected_prev[39];
	end
	if (
		( CipherText_expected_prev[40] !== 1'bx ) && ( CipherText_prev[40] !== CipherText_expected_prev[40] )
		&& ((CipherText_expected_prev[40] !== last_CipherText_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[40] = CipherText_expected_prev[40];
	end
	if (
		( CipherText_expected_prev[41] !== 1'bx ) && ( CipherText_prev[41] !== CipherText_expected_prev[41] )
		&& ((CipherText_expected_prev[41] !== last_CipherText_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[41] = CipherText_expected_prev[41];
	end
	if (
		( CipherText_expected_prev[42] !== 1'bx ) && ( CipherText_prev[42] !== CipherText_expected_prev[42] )
		&& ((CipherText_expected_prev[42] !== last_CipherText_exp[42]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[42] = CipherText_expected_prev[42];
	end
	if (
		( CipherText_expected_prev[43] !== 1'bx ) && ( CipherText_prev[43] !== CipherText_expected_prev[43] )
		&& ((CipherText_expected_prev[43] !== last_CipherText_exp[43]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[43] = CipherText_expected_prev[43];
	end
	if (
		( CipherText_expected_prev[44] !== 1'bx ) && ( CipherText_prev[44] !== CipherText_expected_prev[44] )
		&& ((CipherText_expected_prev[44] !== last_CipherText_exp[44]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[44] = CipherText_expected_prev[44];
	end
	if (
		( CipherText_expected_prev[45] !== 1'bx ) && ( CipherText_prev[45] !== CipherText_expected_prev[45] )
		&& ((CipherText_expected_prev[45] !== last_CipherText_exp[45]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[45] = CipherText_expected_prev[45];
	end
	if (
		( CipherText_expected_prev[46] !== 1'bx ) && ( CipherText_prev[46] !== CipherText_expected_prev[46] )
		&& ((CipherText_expected_prev[46] !== last_CipherText_exp[46]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[46] = CipherText_expected_prev[46];
	end
	if (
		( CipherText_expected_prev[47] !== 1'bx ) && ( CipherText_prev[47] !== CipherText_expected_prev[47] )
		&& ((CipherText_expected_prev[47] !== last_CipherText_exp[47]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[47] = CipherText_expected_prev[47];
	end
	if (
		( CipherText_expected_prev[48] !== 1'bx ) && ( CipherText_prev[48] !== CipherText_expected_prev[48] )
		&& ((CipherText_expected_prev[48] !== last_CipherText_exp[48]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[48] = CipherText_expected_prev[48];
	end
	if (
		( CipherText_expected_prev[49] !== 1'bx ) && ( CipherText_prev[49] !== CipherText_expected_prev[49] )
		&& ((CipherText_expected_prev[49] !== last_CipherText_exp[49]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[49] = CipherText_expected_prev[49];
	end
	if (
		( CipherText_expected_prev[50] !== 1'bx ) && ( CipherText_prev[50] !== CipherText_expected_prev[50] )
		&& ((CipherText_expected_prev[50] !== last_CipherText_exp[50]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[50] = CipherText_expected_prev[50];
	end
	if (
		( CipherText_expected_prev[51] !== 1'bx ) && ( CipherText_prev[51] !== CipherText_expected_prev[51] )
		&& ((CipherText_expected_prev[51] !== last_CipherText_exp[51]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[51] = CipherText_expected_prev[51];
	end
	if (
		( CipherText_expected_prev[52] !== 1'bx ) && ( CipherText_prev[52] !== CipherText_expected_prev[52] )
		&& ((CipherText_expected_prev[52] !== last_CipherText_exp[52]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[52] = CipherText_expected_prev[52];
	end
	if (
		( CipherText_expected_prev[53] !== 1'bx ) && ( CipherText_prev[53] !== CipherText_expected_prev[53] )
		&& ((CipherText_expected_prev[53] !== last_CipherText_exp[53]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[53] = CipherText_expected_prev[53];
	end
	if (
		( CipherText_expected_prev[54] !== 1'bx ) && ( CipherText_prev[54] !== CipherText_expected_prev[54] )
		&& ((CipherText_expected_prev[54] !== last_CipherText_exp[54]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[54] = CipherText_expected_prev[54];
	end
	if (
		( CipherText_expected_prev[55] !== 1'bx ) && ( CipherText_prev[55] !== CipherText_expected_prev[55] )
		&& ((CipherText_expected_prev[55] !== last_CipherText_exp[55]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[55] = CipherText_expected_prev[55];
	end
	if (
		( CipherText_expected_prev[56] !== 1'bx ) && ( CipherText_prev[56] !== CipherText_expected_prev[56] )
		&& ((CipherText_expected_prev[56] !== last_CipherText_exp[56]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[56] = CipherText_expected_prev[56];
	end
	if (
		( CipherText_expected_prev[57] !== 1'bx ) && ( CipherText_prev[57] !== CipherText_expected_prev[57] )
		&& ((CipherText_expected_prev[57] !== last_CipherText_exp[57]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[57] = CipherText_expected_prev[57];
	end
	if (
		( CipherText_expected_prev[58] !== 1'bx ) && ( CipherText_prev[58] !== CipherText_expected_prev[58] )
		&& ((CipherText_expected_prev[58] !== last_CipherText_exp[58]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[58] = CipherText_expected_prev[58];
	end
	if (
		( CipherText_expected_prev[59] !== 1'bx ) && ( CipherText_prev[59] !== CipherText_expected_prev[59] )
		&& ((CipherText_expected_prev[59] !== last_CipherText_exp[59]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[59] = CipherText_expected_prev[59];
	end
	if (
		( CipherText_expected_prev[60] !== 1'bx ) && ( CipherText_prev[60] !== CipherText_expected_prev[60] )
		&& ((CipherText_expected_prev[60] !== last_CipherText_exp[60]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[60] = CipherText_expected_prev[60];
	end
	if (
		( CipherText_expected_prev[61] !== 1'bx ) && ( CipherText_prev[61] !== CipherText_expected_prev[61] )
		&& ((CipherText_expected_prev[61] !== last_CipherText_exp[61]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[61] = CipherText_expected_prev[61];
	end
	if (
		( CipherText_expected_prev[62] !== 1'bx ) && ( CipherText_prev[62] !== CipherText_expected_prev[62] )
		&& ((CipherText_expected_prev[62] !== last_CipherText_exp[62]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[62] = CipherText_expected_prev[62];
	end
	if (
		( CipherText_expected_prev[63] !== 1'bx ) && ( CipherText_prev[63] !== CipherText_expected_prev[63] )
		&& ((CipherText_expected_prev[63] !== last_CipherText_exp[63]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[63] = CipherText_expected_prev[63];
	end
	if (
		( CipherText_expected_prev[64] !== 1'bx ) && ( CipherText_prev[64] !== CipherText_expected_prev[64] )
		&& ((CipherText_expected_prev[64] !== last_CipherText_exp[64]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[64] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[64] = CipherText_expected_prev[64];
	end
	if (
		( CipherText_expected_prev[65] !== 1'bx ) && ( CipherText_prev[65] !== CipherText_expected_prev[65] )
		&& ((CipherText_expected_prev[65] !== last_CipherText_exp[65]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[65] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[65] = CipherText_expected_prev[65];
	end
	if (
		( CipherText_expected_prev[66] !== 1'bx ) && ( CipherText_prev[66] !== CipherText_expected_prev[66] )
		&& ((CipherText_expected_prev[66] !== last_CipherText_exp[66]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[66] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[66] = CipherText_expected_prev[66];
	end
	if (
		( CipherText_expected_prev[67] !== 1'bx ) && ( CipherText_prev[67] !== CipherText_expected_prev[67] )
		&& ((CipherText_expected_prev[67] !== last_CipherText_exp[67]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[67] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[67] = CipherText_expected_prev[67];
	end
	if (
		( CipherText_expected_prev[68] !== 1'bx ) && ( CipherText_prev[68] !== CipherText_expected_prev[68] )
		&& ((CipherText_expected_prev[68] !== last_CipherText_exp[68]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[68] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[68] = CipherText_expected_prev[68];
	end
	if (
		( CipherText_expected_prev[69] !== 1'bx ) && ( CipherText_prev[69] !== CipherText_expected_prev[69] )
		&& ((CipherText_expected_prev[69] !== last_CipherText_exp[69]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[69] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[69] = CipherText_expected_prev[69];
	end
	if (
		( CipherText_expected_prev[70] !== 1'bx ) && ( CipherText_prev[70] !== CipherText_expected_prev[70] )
		&& ((CipherText_expected_prev[70] !== last_CipherText_exp[70]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[70] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[70] = CipherText_expected_prev[70];
	end
	if (
		( CipherText_expected_prev[71] !== 1'bx ) && ( CipherText_prev[71] !== CipherText_expected_prev[71] )
		&& ((CipherText_expected_prev[71] !== last_CipherText_exp[71]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[71] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[71] = CipherText_expected_prev[71];
	end
	if (
		( CipherText_expected_prev[72] !== 1'bx ) && ( CipherText_prev[72] !== CipherText_expected_prev[72] )
		&& ((CipherText_expected_prev[72] !== last_CipherText_exp[72]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[72] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[72] = CipherText_expected_prev[72];
	end
	if (
		( CipherText_expected_prev[73] !== 1'bx ) && ( CipherText_prev[73] !== CipherText_expected_prev[73] )
		&& ((CipherText_expected_prev[73] !== last_CipherText_exp[73]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[73] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[73] = CipherText_expected_prev[73];
	end
	if (
		( CipherText_expected_prev[74] !== 1'bx ) && ( CipherText_prev[74] !== CipherText_expected_prev[74] )
		&& ((CipherText_expected_prev[74] !== last_CipherText_exp[74]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[74] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[74] = CipherText_expected_prev[74];
	end
	if (
		( CipherText_expected_prev[75] !== 1'bx ) && ( CipherText_prev[75] !== CipherText_expected_prev[75] )
		&& ((CipherText_expected_prev[75] !== last_CipherText_exp[75]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[75] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[75] = CipherText_expected_prev[75];
	end
	if (
		( CipherText_expected_prev[76] !== 1'bx ) && ( CipherText_prev[76] !== CipherText_expected_prev[76] )
		&& ((CipherText_expected_prev[76] !== last_CipherText_exp[76]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[76] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[76] = CipherText_expected_prev[76];
	end
	if (
		( CipherText_expected_prev[77] !== 1'bx ) && ( CipherText_prev[77] !== CipherText_expected_prev[77] )
		&& ((CipherText_expected_prev[77] !== last_CipherText_exp[77]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[77] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[77] = CipherText_expected_prev[77];
	end
	if (
		( CipherText_expected_prev[78] !== 1'bx ) && ( CipherText_prev[78] !== CipherText_expected_prev[78] )
		&& ((CipherText_expected_prev[78] !== last_CipherText_exp[78]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[78] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[78] = CipherText_expected_prev[78];
	end
	if (
		( CipherText_expected_prev[79] !== 1'bx ) && ( CipherText_prev[79] !== CipherText_expected_prev[79] )
		&& ((CipherText_expected_prev[79] !== last_CipherText_exp[79]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[79] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[79] = CipherText_expected_prev[79];
	end
	if (
		( CipherText_expected_prev[80] !== 1'bx ) && ( CipherText_prev[80] !== CipherText_expected_prev[80] )
		&& ((CipherText_expected_prev[80] !== last_CipherText_exp[80]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[80] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[80] = CipherText_expected_prev[80];
	end
	if (
		( CipherText_expected_prev[81] !== 1'bx ) && ( CipherText_prev[81] !== CipherText_expected_prev[81] )
		&& ((CipherText_expected_prev[81] !== last_CipherText_exp[81]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[81] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[81] = CipherText_expected_prev[81];
	end
	if (
		( CipherText_expected_prev[82] !== 1'bx ) && ( CipherText_prev[82] !== CipherText_expected_prev[82] )
		&& ((CipherText_expected_prev[82] !== last_CipherText_exp[82]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[82] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[82] = CipherText_expected_prev[82];
	end
	if (
		( CipherText_expected_prev[83] !== 1'bx ) && ( CipherText_prev[83] !== CipherText_expected_prev[83] )
		&& ((CipherText_expected_prev[83] !== last_CipherText_exp[83]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[83] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[83] = CipherText_expected_prev[83];
	end
	if (
		( CipherText_expected_prev[84] !== 1'bx ) && ( CipherText_prev[84] !== CipherText_expected_prev[84] )
		&& ((CipherText_expected_prev[84] !== last_CipherText_exp[84]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[84] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[84] = CipherText_expected_prev[84];
	end
	if (
		( CipherText_expected_prev[85] !== 1'bx ) && ( CipherText_prev[85] !== CipherText_expected_prev[85] )
		&& ((CipherText_expected_prev[85] !== last_CipherText_exp[85]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[85] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[85] = CipherText_expected_prev[85];
	end
	if (
		( CipherText_expected_prev[86] !== 1'bx ) && ( CipherText_prev[86] !== CipherText_expected_prev[86] )
		&& ((CipherText_expected_prev[86] !== last_CipherText_exp[86]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[86] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[86] = CipherText_expected_prev[86];
	end
	if (
		( CipherText_expected_prev[87] !== 1'bx ) && ( CipherText_prev[87] !== CipherText_expected_prev[87] )
		&& ((CipherText_expected_prev[87] !== last_CipherText_exp[87]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[87] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[87] = CipherText_expected_prev[87];
	end
	if (
		( CipherText_expected_prev[88] !== 1'bx ) && ( CipherText_prev[88] !== CipherText_expected_prev[88] )
		&& ((CipherText_expected_prev[88] !== last_CipherText_exp[88]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[88] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[88] = CipherText_expected_prev[88];
	end
	if (
		( CipherText_expected_prev[89] !== 1'bx ) && ( CipherText_prev[89] !== CipherText_expected_prev[89] )
		&& ((CipherText_expected_prev[89] !== last_CipherText_exp[89]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[89] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[89] = CipherText_expected_prev[89];
	end
	if (
		( CipherText_expected_prev[90] !== 1'bx ) && ( CipherText_prev[90] !== CipherText_expected_prev[90] )
		&& ((CipherText_expected_prev[90] !== last_CipherText_exp[90]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[90] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[90] = CipherText_expected_prev[90];
	end
	if (
		( CipherText_expected_prev[91] !== 1'bx ) && ( CipherText_prev[91] !== CipherText_expected_prev[91] )
		&& ((CipherText_expected_prev[91] !== last_CipherText_exp[91]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[91] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[91] = CipherText_expected_prev[91];
	end
	if (
		( CipherText_expected_prev[92] !== 1'bx ) && ( CipherText_prev[92] !== CipherText_expected_prev[92] )
		&& ((CipherText_expected_prev[92] !== last_CipherText_exp[92]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[92] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[92] = CipherText_expected_prev[92];
	end
	if (
		( CipherText_expected_prev[93] !== 1'bx ) && ( CipherText_prev[93] !== CipherText_expected_prev[93] )
		&& ((CipherText_expected_prev[93] !== last_CipherText_exp[93]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[93] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[93] = CipherText_expected_prev[93];
	end
	if (
		( CipherText_expected_prev[94] !== 1'bx ) && ( CipherText_prev[94] !== CipherText_expected_prev[94] )
		&& ((CipherText_expected_prev[94] !== last_CipherText_exp[94]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[94] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[94] = CipherText_expected_prev[94];
	end
	if (
		( CipherText_expected_prev[95] !== 1'bx ) && ( CipherText_prev[95] !== CipherText_expected_prev[95] )
		&& ((CipherText_expected_prev[95] !== last_CipherText_exp[95]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[95] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[95] = CipherText_expected_prev[95];
	end
	if (
		( CipherText_expected_prev[96] !== 1'bx ) && ( CipherText_prev[96] !== CipherText_expected_prev[96] )
		&& ((CipherText_expected_prev[96] !== last_CipherText_exp[96]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[96] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[96] = CipherText_expected_prev[96];
	end
	if (
		( CipherText_expected_prev[97] !== 1'bx ) && ( CipherText_prev[97] !== CipherText_expected_prev[97] )
		&& ((CipherText_expected_prev[97] !== last_CipherText_exp[97]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[97] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[97] = CipherText_expected_prev[97];
	end
	if (
		( CipherText_expected_prev[98] !== 1'bx ) && ( CipherText_prev[98] !== CipherText_expected_prev[98] )
		&& ((CipherText_expected_prev[98] !== last_CipherText_exp[98]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[98] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[98] = CipherText_expected_prev[98];
	end
	if (
		( CipherText_expected_prev[99] !== 1'bx ) && ( CipherText_prev[99] !== CipherText_expected_prev[99] )
		&& ((CipherText_expected_prev[99] !== last_CipherText_exp[99]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[99] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[99] = CipherText_expected_prev[99];
	end
	if (
		( CipherText_expected_prev[100] !== 1'bx ) && ( CipherText_prev[100] !== CipherText_expected_prev[100] )
		&& ((CipherText_expected_prev[100] !== last_CipherText_exp[100]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[100] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[100] = CipherText_expected_prev[100];
	end
	if (
		( CipherText_expected_prev[101] !== 1'bx ) && ( CipherText_prev[101] !== CipherText_expected_prev[101] )
		&& ((CipherText_expected_prev[101] !== last_CipherText_exp[101]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[101] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[101] = CipherText_expected_prev[101];
	end
	if (
		( CipherText_expected_prev[102] !== 1'bx ) && ( CipherText_prev[102] !== CipherText_expected_prev[102] )
		&& ((CipherText_expected_prev[102] !== last_CipherText_exp[102]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[102] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[102] = CipherText_expected_prev[102];
	end
	if (
		( CipherText_expected_prev[103] !== 1'bx ) && ( CipherText_prev[103] !== CipherText_expected_prev[103] )
		&& ((CipherText_expected_prev[103] !== last_CipherText_exp[103]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[103] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[103] = CipherText_expected_prev[103];
	end
	if (
		( CipherText_expected_prev[104] !== 1'bx ) && ( CipherText_prev[104] !== CipherText_expected_prev[104] )
		&& ((CipherText_expected_prev[104] !== last_CipherText_exp[104]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[104] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[104] = CipherText_expected_prev[104];
	end
	if (
		( CipherText_expected_prev[105] !== 1'bx ) && ( CipherText_prev[105] !== CipherText_expected_prev[105] )
		&& ((CipherText_expected_prev[105] !== last_CipherText_exp[105]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[105] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[105] = CipherText_expected_prev[105];
	end
	if (
		( CipherText_expected_prev[106] !== 1'bx ) && ( CipherText_prev[106] !== CipherText_expected_prev[106] )
		&& ((CipherText_expected_prev[106] !== last_CipherText_exp[106]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[106] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[106] = CipherText_expected_prev[106];
	end
	if (
		( CipherText_expected_prev[107] !== 1'bx ) && ( CipherText_prev[107] !== CipherText_expected_prev[107] )
		&& ((CipherText_expected_prev[107] !== last_CipherText_exp[107]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[107] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[107] = CipherText_expected_prev[107];
	end
	if (
		( CipherText_expected_prev[108] !== 1'bx ) && ( CipherText_prev[108] !== CipherText_expected_prev[108] )
		&& ((CipherText_expected_prev[108] !== last_CipherText_exp[108]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[108] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[108] = CipherText_expected_prev[108];
	end
	if (
		( CipherText_expected_prev[109] !== 1'bx ) && ( CipherText_prev[109] !== CipherText_expected_prev[109] )
		&& ((CipherText_expected_prev[109] !== last_CipherText_exp[109]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[109] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[109] = CipherText_expected_prev[109];
	end
	if (
		( CipherText_expected_prev[110] !== 1'bx ) && ( CipherText_prev[110] !== CipherText_expected_prev[110] )
		&& ((CipherText_expected_prev[110] !== last_CipherText_exp[110]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[110] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[110] = CipherText_expected_prev[110];
	end
	if (
		( CipherText_expected_prev[111] !== 1'bx ) && ( CipherText_prev[111] !== CipherText_expected_prev[111] )
		&& ((CipherText_expected_prev[111] !== last_CipherText_exp[111]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[111] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[111] = CipherText_expected_prev[111];
	end
	if (
		( CipherText_expected_prev[112] !== 1'bx ) && ( CipherText_prev[112] !== CipherText_expected_prev[112] )
		&& ((CipherText_expected_prev[112] !== last_CipherText_exp[112]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[112] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[112] = CipherText_expected_prev[112];
	end
	if (
		( CipherText_expected_prev[113] !== 1'bx ) && ( CipherText_prev[113] !== CipherText_expected_prev[113] )
		&& ((CipherText_expected_prev[113] !== last_CipherText_exp[113]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[113] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[113] = CipherText_expected_prev[113];
	end
	if (
		( CipherText_expected_prev[114] !== 1'bx ) && ( CipherText_prev[114] !== CipherText_expected_prev[114] )
		&& ((CipherText_expected_prev[114] !== last_CipherText_exp[114]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[114] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[114] = CipherText_expected_prev[114];
	end
	if (
		( CipherText_expected_prev[115] !== 1'bx ) && ( CipherText_prev[115] !== CipherText_expected_prev[115] )
		&& ((CipherText_expected_prev[115] !== last_CipherText_exp[115]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[115] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[115] = CipherText_expected_prev[115];
	end
	if (
		( CipherText_expected_prev[116] !== 1'bx ) && ( CipherText_prev[116] !== CipherText_expected_prev[116] )
		&& ((CipherText_expected_prev[116] !== last_CipherText_exp[116]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[116] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[116] = CipherText_expected_prev[116];
	end
	if (
		( CipherText_expected_prev[117] !== 1'bx ) && ( CipherText_prev[117] !== CipherText_expected_prev[117] )
		&& ((CipherText_expected_prev[117] !== last_CipherText_exp[117]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[117] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[117] = CipherText_expected_prev[117];
	end
	if (
		( CipherText_expected_prev[118] !== 1'bx ) && ( CipherText_prev[118] !== CipherText_expected_prev[118] )
		&& ((CipherText_expected_prev[118] !== last_CipherText_exp[118]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[118] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[118] = CipherText_expected_prev[118];
	end
	if (
		( CipherText_expected_prev[119] !== 1'bx ) && ( CipherText_prev[119] !== CipherText_expected_prev[119] )
		&& ((CipherText_expected_prev[119] !== last_CipherText_exp[119]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[119] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[119] = CipherText_expected_prev[119];
	end
	if (
		( CipherText_expected_prev[120] !== 1'bx ) && ( CipherText_prev[120] !== CipherText_expected_prev[120] )
		&& ((CipherText_expected_prev[120] !== last_CipherText_exp[120]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[120] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[120] = CipherText_expected_prev[120];
	end
	if (
		( CipherText_expected_prev[121] !== 1'bx ) && ( CipherText_prev[121] !== CipherText_expected_prev[121] )
		&& ((CipherText_expected_prev[121] !== last_CipherText_exp[121]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[121] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[121] = CipherText_expected_prev[121];
	end
	if (
		( CipherText_expected_prev[122] !== 1'bx ) && ( CipherText_prev[122] !== CipherText_expected_prev[122] )
		&& ((CipherText_expected_prev[122] !== last_CipherText_exp[122]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[122] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[122] = CipherText_expected_prev[122];
	end
	if (
		( CipherText_expected_prev[123] !== 1'bx ) && ( CipherText_prev[123] !== CipherText_expected_prev[123] )
		&& ((CipherText_expected_prev[123] !== last_CipherText_exp[123]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[123] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[123] = CipherText_expected_prev[123];
	end
	if (
		( CipherText_expected_prev[124] !== 1'bx ) && ( CipherText_prev[124] !== CipherText_expected_prev[124] )
		&& ((CipherText_expected_prev[124] !== last_CipherText_exp[124]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[124] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[124] = CipherText_expected_prev[124];
	end
	if (
		( CipherText_expected_prev[125] !== 1'bx ) && ( CipherText_prev[125] !== CipherText_expected_prev[125] )
		&& ((CipherText_expected_prev[125] !== last_CipherText_exp[125]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[125] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[125] = CipherText_expected_prev[125];
	end
	if (
		( CipherText_expected_prev[126] !== 1'bx ) && ( CipherText_prev[126] !== CipherText_expected_prev[126] )
		&& ((CipherText_expected_prev[126] !== last_CipherText_exp[126]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[126] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[126] = CipherText_expected_prev[126];
	end
	if (
		( CipherText_expected_prev[127] !== 1'bx ) && ( CipherText_prev[127] !== CipherText_expected_prev[127] )
		&& ((CipherText_expected_prev[127] !== last_CipherText_exp[127]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CipherText[127] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CipherText_expected_prev);
		$display ("     Real value = %b", CipherText_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CipherText_exp[127] = CipherText_expected_prev[127];
	end
	if (
		( Ready_new_input_expected_prev !== 1'bx ) && ( Ready_new_input_prev !== Ready_new_input_expected_prev )
		&& ((Ready_new_input_expected_prev !== last_Ready_new_input_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ready_new_input :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ready_new_input_expected_prev);
		$display ("     Real value = %b", Ready_new_input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Ready_new_input_exp = Ready_new_input_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AES_Top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Load_Data;
reg Load_Key;
reg clk;
reg [127:0] in_data;
reg rst;
// wires                                               
wire CTValid;
wire [127:0] CipherText;
wire Ready_new_input;

wire sampler;                             

// assign statements (if any)                          
AES_Top i1 (
// port map - connection between master ports and signals/registers   
	.CTValid(CTValid),
	.CipherText(CipherText),
	.Load_Data(Load_Data),
	.Load_Key(Load_Key),
	.Ready_new_input(Ready_new_input),
	.clk(clk),
	.in_data(in_data),
	.rst(rst)
);

// rst
initial
begin
	rst = 1'b1;
	rst = #20000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// Load_Data
initial
begin
	Load_Data = 1'b0;
	Load_Data = #30000 1'b1;
	Load_Data = #10000 1'b0;
	Load_Data = #440000 1'b1;
	Load_Data = #10000 1'b0;
end 

// Load_Key
initial
begin
	Load_Key = 1'b0;
	Load_Key = #20000 1'b1;
	Load_Key = #10000 1'b0;
	Load_Key = #440000 1'b1;
	Load_Key = #10000 1'b0;
end 
// in_data[ 127 ]
initial
begin
	in_data[127] = 1'b0;
end 
// in_data[ 126 ]
initial
begin
	in_data[126] = 1'b0;
	in_data[126] = #470000 1'b1;
	in_data[126] = #20000 1'b0;
end 
// in_data[ 125 ]
initial
begin
	in_data[125] = 1'b0;
	in_data[125] = #20000 1'b1;
	in_data[125] = #20000 1'b0;
end 
// in_data[ 124 ]
initial
begin
	in_data[124] = 1'b0;
	in_data[124] = #30000 1'b1;
	in_data[124] = #10000 1'b0;
	in_data[124] = #430000 1'b1;
	in_data[124] = #20000 1'b0;
end 
// in_data[ 123 ]
initial
begin
	in_data[123] = 1'b0;
	in_data[123] = #20000 1'b1;
	in_data[123] = #10000 1'b0;
end 
// in_data[ 122 ]
initial
begin
	in_data[122] = 1'b0;
	in_data[122] = #470000 1'b1;
	in_data[122] = #20000 1'b0;
end 
// in_data[ 121 ]
initial
begin
	in_data[121] = 1'b0;
	in_data[121] = #20000 1'b1;
	in_data[121] = #20000 1'b0;
end 
// in_data[ 120 ]
initial
begin
	in_data[120] = 1'b0;
	in_data[120] = #20000 1'b1;
	in_data[120] = #10000 1'b0;
end 
// in_data[ 119 ]
initial
begin
	in_data[119] = 1'b0;
end 
// in_data[ 118 ]
initial
begin
	in_data[118] = 1'b0;
	in_data[118] = #20000 1'b1;
	in_data[118] = #20000 1'b0;
	in_data[118] = #430000 1'b1;
	in_data[118] = #20000 1'b0;
end 
// in_data[ 117 ]
initial
begin
	in_data[117] = 1'b0;
	in_data[117] = #20000 1'b1;
	in_data[117] = #10000 1'b0;
	in_data[117] = #440000 1'b1;
	in_data[117] = #20000 1'b0;
end 
// in_data[ 116 ]
initial
begin
	in_data[116] = 1'b0;
	in_data[116] = #20000 1'b1;
	in_data[116] = #10000 1'b0;
	in_data[116] = #450000 1'b1;
	in_data[116] = #10000 1'b0;
end 
// in_data[ 115 ]
initial
begin
	in_data[115] = 1'b0;
	in_data[115] = #20000 1'b1;
	in_data[115] = #10000 1'b0;
	in_data[115] = #440000 1'b1;
	in_data[115] = #10000 1'b0;
end 
// in_data[ 114 ]
initial
begin
	in_data[114] = 1'b0;
	in_data[114] = #20000 1'b1;
	in_data[114] = #10000 1'b0;
	in_data[114] = #450000 1'b1;
	in_data[114] = #10000 1'b0;
end 
// in_data[ 113 ]
initial
begin
	in_data[113] = 1'b0;
	in_data[113] = #20000 1'b1;
	in_data[113] = #20000 1'b0;
	in_data[113] = #440000 1'b1;
	in_data[113] = #10000 1'b0;
end 
// in_data[ 112 ]
initial
begin
	in_data[112] = 1'b0;
	in_data[112] = #30000 1'b1;
	in_data[112] = #10000 1'b0;
	in_data[112] = #440000 1'b1;
	in_data[112] = #10000 1'b0;
end 
// in_data[ 111 ]
initial
begin
	in_data[111] = 1'b0;
	in_data[111] = #30000 1'b1;
	in_data[111] = #10000 1'b0;
end 
// in_data[ 110 ]
initial
begin
	in_data[110] = 1'b0;
	in_data[110] = #30000 1'b1;
	in_data[110] = #10000 1'b0;
	in_data[110] = #430000 1'b1;
	in_data[110] = #20000 1'b0;
end 
// in_data[ 109 ]
initial
begin
	in_data[109] = 1'b0;
	in_data[109] = #30000 1'b1;
	in_data[109] = #10000 1'b0;
	in_data[109] = #430000 1'b1;
	in_data[109] = #20000 1'b0;
end 
// in_data[ 108 ]
initial
begin
	in_data[108] = 1'b0;
	in_data[108] = #20000 1'b1;
	in_data[108] = #20000 1'b0;
end 
// in_data[ 107 ]
initial
begin
	in_data[107] = 1'b0;
	in_data[107] = #480000 1'b1;
	in_data[107] = #10000 1'b0;
end 
// in_data[ 106 ]
initial
begin
	in_data[106] = 1'b0;
	in_data[106] = #20000 1'b1;
	in_data[106] = #20000 1'b0;
	in_data[106] = #440000 1'b1;
	in_data[106] = #10000 1'b0;
end 
// in_data[ 105 ]
initial
begin
	in_data[105] = 1'b0;
	in_data[105] = #30000 1'b1;
	in_data[105] = #10000 1'b0;
	in_data[105] = #440000 1'b1;
	in_data[105] = #10000 1'b0;
end 
// in_data[ 104 ]
initial
begin
	in_data[104] = 1'b0;
	in_data[104] = #20000 1'b1;
	in_data[104] = #10000 1'b0;
	in_data[104] = #440000 1'b1;
	in_data[104] = #20000 1'b0;
end 
// in_data[ 103 ]
initial
begin
	in_data[103] = 1'b0;
	in_data[103] = #30000 1'b1;
	in_data[103] = #10000 1'b0;
end 
// in_data[ 102 ]
initial
begin
	in_data[102] = 1'b0;
	in_data[102] = #470000 1'b1;
	in_data[102] = #10000 1'b0;
end 
// in_data[ 101 ]
initial
begin
	in_data[101] = 1'b0;
	in_data[101] = #30000 1'b1;
	in_data[101] = #10000 1'b0;
	in_data[101] = #430000 1'b1;
	in_data[101] = #20000 1'b0;
end 
// in_data[ 100 ]
initial
begin
	in_data[100] = 1'b0;
	in_data[100] = #20000 1'b1;
	in_data[100] = #10000 1'b0;
	in_data[100] = #440000 1'b1;
	in_data[100] = #10000 1'b0;
end 
// in_data[ 99 ]
initial
begin
	in_data[99] = 1'b0;
	in_data[99] = #30000 1'b1;
	in_data[99] = #10000 1'b0;
end 
// in_data[ 98 ]
initial
begin
	in_data[98] = 1'b0;
	in_data[98] = #20000 1'b1;
	in_data[98] = #10000 1'b0;
	in_data[98] = #440000 1'b1;
	in_data[98] = #10000 1'b0;
end 
// in_data[ 97 ]
initial
begin
	in_data[97] = 1'b0;
	in_data[97] = #20000 1'b1;
	in_data[97] = #10000 1'b0;
end 
// in_data[ 96 ]
initial
begin
	in_data[96] = 1'b0;
end 
// in_data[ 95 ]
initial
begin
	in_data[95] = 1'b0;
	in_data[95] = #30000 1'b1;
	in_data[95] = #10000 1'b0;
end 
// in_data[ 94 ]
initial
begin
	in_data[94] = 1'b0;
	in_data[94] = #470000 1'b1;
	in_data[94] = #20000 1'b0;
end 
// in_data[ 93 ]
initial
begin
	in_data[93] = 1'b0;
	in_data[93] = #20000 1'b1;
	in_data[93] = #10000 1'b0;
	in_data[93] = #440000 1'b1;
	in_data[93] = #10000 1'b0;
end 
// in_data[ 92 ]
initial
begin
	in_data[92] = 1'b0;
	in_data[92] = #470000 1'b1;
	in_data[92] = #10000 1'b0;
end 
// in_data[ 91 ]
initial
begin
	in_data[91] = 1'b0;
	in_data[91] = #20000 1'b1;
	in_data[91] = #20000 1'b0;
	in_data[91] = #440000 1'b1;
	in_data[91] = #10000 1'b0;
end 
// in_data[ 90 ]
initial
begin
	in_data[90] = 1'b0;
	in_data[90] = #480000 1'b1;
	in_data[90] = #10000 1'b0;
end 
// in_data[ 89 ]
initial
begin
	in_data[89] = 1'b0;
	in_data[89] = #470000 1'b1;
	in_data[89] = #20000 1'b0;
end 
// in_data[ 88 ]
initial
begin
	in_data[88] = 1'b0;
	in_data[88] = #470000 1'b1;
	in_data[88] = #20000 1'b0;
end 
// in_data[ 87 ]
initial
begin
	in_data[87] = 1'b0;
	in_data[87] = #20000 1'b1;
	in_data[87] = #10000 1'b0;
end 
// in_data[ 86 ]
initial
begin
	in_data[86] = 1'b0;
	in_data[86] = #30000 1'b1;
	in_data[86] = #10000 1'b0;
	in_data[86] = #440000 1'b1;
	in_data[86] = #10000 1'b0;
end 
// in_data[ 85 ]
initial
begin
	in_data[85] = 1'b0;
	in_data[85] = #20000 1'b1;
	in_data[85] = #10000 1'b0;
	in_data[85] = #440000 1'b1;
	in_data[85] = #20000 1'b0;
end 
// in_data[ 84 ]
initial
begin
	in_data[84] = 1'b0;
	in_data[84] = #30000 1'b1;
	in_data[84] = #10000 1'b0;
end 
// in_data[ 83 ]
initial
begin
	in_data[83] = 1'b0;
	in_data[83] = #20000 1'b1;
	in_data[83] = #20000 1'b0;
	in_data[83] = #440000 1'b1;
	in_data[83] = #10000 1'b0;
end 
// in_data[ 82 ]
initial
begin
	in_data[82] = 1'b0;
	in_data[82] = #20000 1'b1;
	in_data[82] = #10000 1'b0;
	in_data[82] = #450000 1'b1;
	in_data[82] = #10000 1'b0;
end 
// in_data[ 81 ]
initial
begin
	in_data[81] = 1'b0;
	in_data[81] = #20000 1'b1;
	in_data[81] = #20000 1'b0;
	in_data[81] = #440000 1'b1;
	in_data[81] = #10000 1'b0;
end 
// in_data[ 80 ]
initial
begin
	in_data[80] = 1'b0;
end 
// in_data[ 79 ]
initial
begin
	in_data[79] = 1'b0;
	in_data[79] = #20000 1'b1;
	in_data[79] = #10000 1'b0;
end 
// in_data[ 78 ]
initial
begin
	in_data[78] = 1'b0;
	in_data[78] = #20000 1'b1;
	in_data[78] = #10000 1'b0;
	in_data[78] = #440000 1'b1;
	in_data[78] = #20000 1'b0;
end 
// in_data[ 77 ]
initial
begin
	in_data[77] = 1'b0;
	in_data[77] = #30000 1'b1;
	in_data[77] = #10000 1'b0;
	in_data[77] = #430000 1'b1;
	in_data[77] = #20000 1'b0;
end 
// in_data[ 76 ]
initial
begin
	in_data[76] = 1'b0;
	in_data[76] = #20000 1'b1;
	in_data[76] = #20000 1'b0;
end 
// in_data[ 75 ]
initial
begin
	in_data[75] = 1'b0;
	in_data[75] = #470000 1'b1;
	in_data[75] = #10000 1'b0;
end 
// in_data[ 74 ]
initial
begin
	in_data[74] = 1'b0;
	in_data[74] = #470000 1'b1;
	in_data[74] = #20000 1'b0;
end 
// in_data[ 73 ]
initial
begin
	in_data[73] = 1'b0;
	in_data[73] = #20000 1'b1;
	in_data[73] = #10000 1'b0;
end 
// in_data[ 72 ]
initial
begin
	in_data[72] = 1'b0;
	in_data[72] = #470000 1'b1;
	in_data[72] = #20000 1'b0;
end 
// in_data[ 71 ]
initial
begin
	in_data[71] = 1'b0;
	in_data[71] = #20000 1'b1;
	in_data[71] = #20000 1'b0;
end 
// in_data[ 70 ]
initial
begin
	in_data[70] = 1'b0;
	in_data[70] = #470000 1'b1;
	in_data[70] = #10000 1'b0;
end 
// in_data[ 69 ]
initial
begin
	in_data[69] = 1'b0;
	in_data[69] = #20000 1'b1;
	in_data[69] = #10000 1'b0;
	in_data[69] = #440000 1'b1;
	in_data[69] = #20000 1'b0;
end 
// in_data[ 68 ]
initial
begin
	in_data[68] = 1'b0;
	in_data[68] = #470000 1'b1;
	in_data[68] = #10000 1'b0;
end 
// in_data[ 67 ]
initial
begin
	in_data[67] = 1'b0;
	in_data[67] = #30000 1'b1;
	in_data[67] = #10000 1'b0;
	in_data[67] = #430000 1'b1;
	in_data[67] = #10000 1'b0;
end 
// in_data[ 66 ]
initial
begin
	in_data[66] = 1'b0;
	in_data[66] = #20000 1'b1;
	in_data[66] = #20000 1'b0;
end 
// in_data[ 65 ]
initial
begin
	in_data[65] = 1'b0;
	in_data[65] = #20000 1'b1;
	in_data[65] = #10000 1'b0;
end 
// in_data[ 64 ]
initial
begin
	in_data[64] = 1'b0;
	in_data[64] = #30000 1'b1;
	in_data[64] = #10000 1'b0;
	in_data[64] = #430000 1'b1;
	in_data[64] = #10000 1'b0;
end 
// in_data[ 63 ]
initial
begin
	in_data[63] = 1'b0;
	in_data[63] = #20000 1'b1;
	in_data[63] = #10000 1'b0;
end 
// in_data[ 62 ]
initial
begin
	in_data[62] = 1'b0;
	in_data[62] = #480000 1'b1;
	in_data[62] = #10000 1'b0;
end 
// in_data[ 61 ]
initial
begin
	in_data[61] = 1'b0;
	in_data[61] = #20000 1'b1;
	in_data[61] = #20000 1'b0;
	in_data[61] = #430000 1'b1;
	in_data[61] = #10000 1'b0;
end 
// in_data[ 60 ]
initial
begin
	in_data[60] = 1'b0;
	in_data[60] = #30000 1'b1;
	in_data[60] = #10000 1'b0;
end 
// in_data[ 59 ]
initial
begin
	in_data[59] = 1'b0;
	in_data[59] = #20000 1'b1;
	in_data[59] = #10000 1'b0;
	in_data[59] = #450000 1'b1;
	in_data[59] = #10000 1'b0;
end 
// in_data[ 58 ]
initial
begin
	in_data[58] = 1'b0;
	in_data[58] = #480000 1'b1;
	in_data[58] = #10000 1'b0;
end 
// in_data[ 57 ]
initial
begin
	in_data[57] = 1'b0;
	in_data[57] = #20000 1'b1;
	in_data[57] = #10000 1'b0;
	in_data[57] = #450000 1'b1;
	in_data[57] = #10000 1'b0;
end 
// in_data[ 56 ]
initial
begin
	in_data[56] = 1'b0;
	in_data[56] = #20000 1'b1;
	in_data[56] = #20000 1'b0;
end 
// in_data[ 55 ]
initial
begin
	in_data[55] = 1'b0;
	in_data[55] = #20000 1'b1;
	in_data[55] = #10000 1'b0;
end 
// in_data[ 54 ]
initial
begin
	in_data[54] = 1'b0;
	in_data[54] = #20000 1'b1;
	in_data[54] = #10000 1'b0;
	in_data[54] = #440000 1'b1;
	in_data[54] = #20000 1'b0;
end 
// in_data[ 53 ]
initial
begin
	in_data[53] = 1'b0;
	in_data[53] = #20000 1'b1;
	in_data[53] = #20000 1'b0;
	in_data[53] = #440000 1'b1;
	in_data[53] = #10000 1'b0;
end 
// in_data[ 52 ]
initial
begin
	in_data[52] = 1'b0;
	in_data[52] = #20000 1'b1;
	in_data[52] = #20000 1'b0;
end 
// in_data[ 51 ]
initial
begin
	in_data[51] = 1'b0;
	in_data[51] = #470000 1'b1;
	in_data[51] = #20000 1'b0;
end 
// in_data[ 50 ]
initial
begin
	in_data[50] = 1'b0;
	in_data[50] = #20000 1'b1;
	in_data[50] = #10000 1'b0;
end 
// in_data[ 49 ]
initial
begin
	in_data[49] = 1'b0;
	in_data[49] = #20000 1'b1;
	in_data[49] = #10000 1'b0;
	in_data[49] = #440000 1'b1;
	in_data[49] = #10000 1'b0;
end 
// in_data[ 48 ]
initial
begin
	in_data[48] = 1'b0;
	in_data[48] = #20000 1'b1;
	in_data[48] = #20000 1'b0;
	in_data[48] = #430000 1'b1;
	in_data[48] = #20000 1'b0;
end 
// in_data[ 47 ]
initial
begin
	in_data[47] = 1'b0;
	in_data[47] = #30000 1'b1;
	in_data[47] = #10000 1'b0;
end 
// in_data[ 46 ]
initial
begin
	in_data[46] = 1'b0;
	in_data[46] = #470000 1'b1;
	in_data[46] = #20000 1'b0;
end 
// in_data[ 45 ]
initial
begin
	in_data[45] = 1'b0;
	in_data[45] = #470000 1'b1;
	in_data[45] = #20000 1'b0;
end 
// in_data[ 44 ]
initial
begin
	in_data[44] = 1'b0;
	in_data[44] = #20000 1'b1;
	in_data[44] = #20000 1'b0;
	in_data[44] = #430000 1'b1;
	in_data[44] = #10000 1'b0;
end 
// in_data[ 43 ]
initial
begin
	in_data[43] = 1'b0;
	in_data[43] = #30000 1'b1;
	in_data[43] = #10000 1'b0;
	in_data[43] = #440000 1'b1;
	in_data[43] = #10000 1'b0;
end 
// in_data[ 42 ]
initial
begin
	in_data[42] = 1'b0;
	in_data[42] = #20000 1'b1;
	in_data[42] = #10000 1'b0;
	in_data[42] = #440000 1'b1;
	in_data[42] = #20000 1'b0;
end 
// in_data[ 41 ]
initial
begin
	in_data[41] = 1'b0;
	in_data[41] = #480000 1'b1;
	in_data[41] = #10000 1'b0;
end 
// in_data[ 40 ]
initial
begin
	in_data[40] = 1'b0;
	in_data[40] = #20000 1'b1;
	in_data[40] = #10000 1'b0;
	in_data[40] = #440000 1'b1;
	in_data[40] = #10000 1'b0;
end 
// in_data[ 39 ]
initial
begin
	in_data[39] = 1'b0;
	in_data[39] = #20000 1'b1;
	in_data[39] = #20000 1'b0;
end 
// in_data[ 38 ]
initial
begin
	in_data[38] = 1'b0;
	in_data[38] = #470000 1'b1;
	in_data[38] = #20000 1'b0;
end 
// in_data[ 37 ]
initial
begin
	in_data[37] = 1'b0;
	in_data[37] = #30000 1'b1;
	in_data[37] = #10000 1'b0;
	in_data[37] = #430000 1'b1;
	in_data[37] = #20000 1'b0;
end 
// in_data[ 36 ]
initial
begin
	in_data[36] = 1'b0;
end 
// in_data[ 35 ]
initial
begin
	in_data[35] = 1'b0;
	in_data[35] = #20000 1'b1;
	in_data[35] = #10000 1'b0;
	in_data[35] = #440000 1'b1;
	in_data[35] = #10000 1'b0;
end 
// in_data[ 34 ]
initial
begin
	in_data[34] = 1'b0;
	in_data[34] = #470000 1'b1;
	in_data[34] = #20000 1'b0;
end 
// in_data[ 33 ]
initial
begin
	in_data[33] = 1'b0;
	in_data[33] = #30000 1'b1;
	in_data[33] = #10000 1'b0;
	in_data[33] = #430000 1'b1;
	in_data[33] = #10000 1'b0;
end 
// in_data[ 32 ]
initial
begin
	in_data[32] = 1'b0;
	in_data[32] = #480000 1'b1;
	in_data[32] = #10000 1'b0;
end 
// in_data[ 31 ]
initial
begin
	in_data[31] = 1'b0;
	in_data[31] = #30000 1'b1;
	in_data[31] = #10000 1'b0;
end 
// in_data[ 30 ]
initial
begin
	in_data[30] = 1'b0;
	in_data[30] = #30000 1'b1;
	in_data[30] = #10000 1'b0;
	in_data[30] = #430000 1'b1;
	in_data[30] = #10000 1'b0;
end 
// in_data[ 29 ]
initial
begin
	in_data[29] = 1'b0;
	in_data[29] = #30000 1'b1;
	in_data[29] = #10000 1'b0;
	in_data[29] = #430000 1'b1;
	in_data[29] = #20000 1'b0;
end 
// in_data[ 28 ]
initial
begin
	in_data[28] = 1'b0;
end 
// in_data[ 27 ]
initial
begin
	in_data[27] = 1'b0;
	in_data[27] = #20000 1'b1;
	in_data[27] = #10000 1'b0;
end 
// in_data[ 26 ]
initial
begin
	in_data[26] = 1'b0;
	in_data[26] = #470000 1'b1;
	in_data[26] = #10000 1'b0;
end 
// in_data[ 25 ]
initial
begin
	in_data[25] = 1'b0;
	in_data[25] = #470000 1'b1;
	in_data[25] = #10000 1'b0;
end 
// in_data[ 24 ]
initial
begin
	in_data[24] = 1'b0;
	in_data[24] = #20000 1'b1;
	in_data[24] = #10000 1'b0;
	in_data[24] = #440000 1'b1;
	in_data[24] = #10000 1'b0;
end 
// in_data[ 23 ]
initial
begin
	in_data[23] = 1'b0;
	in_data[23] = #20000 1'b1;
	in_data[23] = #10000 1'b0;
end 
// in_data[ 22 ]
initial
begin
	in_data[22] = 1'b0;
	in_data[22] = #20000 1'b1;
	in_data[22] = #10000 1'b0;
	in_data[22] = #450000 1'b1;
	in_data[22] = #10000 1'b0;
end 
// in_data[ 21 ]
initial
begin
	in_data[21] = 1'b0;
	in_data[21] = #30000 1'b1;
	in_data[21] = #10000 1'b0;
	in_data[21] = #430000 1'b1;
	in_data[21] = #10000 1'b0;
end 
// in_data[ 20 ]
initial
begin
	in_data[20] = 1'b0;
	in_data[20] = #30000 1'b1;
	in_data[20] = #10000 1'b0;
	in_data[20] = #440000 1'b1;
	in_data[20] = #10000 1'b0;
end 
// in_data[ 19 ]
initial
begin
	in_data[19] = 1'b0;
	in_data[19] = #20000 1'b1;
	in_data[19] = #10000 1'b0;
end 
// in_data[ 18 ]
initial
begin
	in_data[18] = 1'b0;
	in_data[18] = #20000 1'b1;
	in_data[18] = #20000 1'b0;
	in_data[18] = #440000 1'b1;
	in_data[18] = #10000 1'b0;
end 
// in_data[ 17 ]
initial
begin
	in_data[17] = 1'b0;
	in_data[17] = #20000 1'b1;
	in_data[17] = #20000 1'b0;
end 
// in_data[ 16 ]
initial
begin
	in_data[16] = 1'b0;
	in_data[16] = #20000 1'b1;
	in_data[16] = #20000 1'b0;
end 
// in_data[ 15 ]
initial
begin
	in_data[15] = 1'b0;
end 
// in_data[ 14 ]
initial
begin
	in_data[14] = 1'b0;
	in_data[14] = #20000 1'b1;
	in_data[14] = #10000 1'b0;
	in_data[14] = #440000 1'b1;
	in_data[14] = #20000 1'b0;
end 
// in_data[ 13 ]
initial
begin
	in_data[13] = 1'b0;
	in_data[13] = #480000 1'b1;
	in_data[13] = #10000 1'b0;
end 
// in_data[ 12 ]
initial
begin
	in_data[12] = 1'b0;
	in_data[12] = #480000 1'b1;
	in_data[12] = #10000 1'b0;
end 
// in_data[ 11 ]
initial
begin
	in_data[11] = 1'b0;
	in_data[11] = #20000 1'b1;
	in_data[11] = #10000 1'b0;
end 
// in_data[ 10 ]
initial
begin
	in_data[10] = 1'b0;
	in_data[10] = #20000 1'b1;
	in_data[10] = #20000 1'b0;
	in_data[10] = #430000 1'b1;
	in_data[10] = #20000 1'b0;
end 
// in_data[ 9 ]
initial
begin
	in_data[9] = 1'b0;
	in_data[9] = #20000 1'b1;
	in_data[9] = #20000 1'b0;
	in_data[9] = #430000 1'b1;
	in_data[9] = #20000 1'b0;
end 
// in_data[ 8 ]
initial
begin
	in_data[8] = 1'b0;
	in_data[8] = #20000 1'b1;
	in_data[8] = #20000 1'b0;
	in_data[8] = #440000 1'b1;
	in_data[8] = #10000 1'b0;
end 
// in_data[ 7 ]
initial
begin
	in_data[7] = 1'b0;
end 
// in_data[ 6 ]
initial
begin
	in_data[6] = 1'b0;
	in_data[6] = #470000 1'b1;
	in_data[6] = #20000 1'b0;
end 
// in_data[ 5 ]
initial
begin
	in_data[5] = 1'b0;
	in_data[5] = #20000 1'b1;
	in_data[5] = #20000 1'b0;
	in_data[5] = #430000 1'b1;
	in_data[5] = #20000 1'b0;
end 
// in_data[ 4 ]
initial
begin
	in_data[4] = 1'b0;
	in_data[4] = #20000 1'b1;
	in_data[4] = #20000 1'b0;
	in_data[4] = #430000 1'b1;
	in_data[4] = #10000 1'b0;
end 
// in_data[ 3 ]
initial
begin
	in_data[3] = 1'b0;
	in_data[3] = #20000 1'b1;
	in_data[3] = #10000 1'b0;
	in_data[3] = #450000 1'b1;
	in_data[3] = #10000 1'b0;
end 
// in_data[ 2 ]
initial
begin
	in_data[2] = 1'b0;
	in_data[2] = #20000 1'b1;
	in_data[2] = #20000 1'b0;
	in_data[2] = #430000 1'b1;
	in_data[2] = #20000 1'b0;
end 
// in_data[ 1 ]
initial
begin
	in_data[1] = 1'b0;
	in_data[1] = #480000 1'b1;
	in_data[1] = #10000 1'b0;
end 
// in_data[ 0 ]
initial
begin
	in_data[0] = 1'b0;
	in_data[0] = #470000 1'b1;
	in_data[0] = #20000 1'b0;
end 

AES_Top_vlg_sample_tst tb_sample (
	.Load_Data(Load_Data),
	.Load_Key(Load_Key),
	.clk(clk),
	.in_data(in_data),
	.rst(rst),
	.sampler_tx(sampler)
);

AES_Top_vlg_check_tst tb_out(
	.CTValid(CTValid),
	.CipherText(CipherText),
	.Ready_new_input(Ready_new_input),
	.sampler_rx(sampler)
);
endmodule

