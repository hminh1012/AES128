module wrapper_avalon(
    input         iClk,
    input         iReset_n,
    input         iChipSelect_n,
    input         iWrite_n,
    input         iRead_n,
    input  [2:0]  iAddress,
    input  [31:0] iData,
    output reg [31:0] oData
);

    // Internal registers and wires
    reg  [127:0] in_data;
    reg  [127:0] temp_result;
    reg          tmp_valid;
    reg          Load_Data, Load_Key;

    wire         Ready_new_input;
    wire         CTValid;
    wire [127:0] CipherText;

    // AES core instance
    AES_Top inst (
        .clk(iClk),
        .rst(~iReset_n),
        .in_data(in_data),
        .Load_Key(Load_Key),
        .Load_Data(Load_Data),
        .Ready_new_input(Ready_new_input),
        .CTValid(CTValid),
        .CipherText(CipherText)
    );

    // Latch CipherText when CTValid is high
    always @(posedge iClk or negedge iReset_n) begin
        if (~iReset_n) begin
            temp_result <= 128'd0;
            tmp_valid   <= 1'b0;
        end else if (CTValid) begin
            temp_result <= CipherText;
            tmp_valid   <= 1'b1;
        end
    end

    // Handle write: capture in_data and generate Load_Data / Load_Key pulse
    always @(posedge iClk or negedge iReset_n) begin
        if (~iReset_n) begin
            in_data   <= 128'd0;
            Load_Data <= 1'b0;
            Load_Key  <= 1'b0;
        end else begin
            // Clear pulses
            Load_Data <= 1'b0;
            Load_Key  <= 1'b0;

            if (~iChipSelect_n && ~iWrite_n) begin
                case (iAddress)
                    3'd0: in_data[127:96] <= iData;
                    3'd1: in_data[95:64]  <= iData;
                    3'd2: in_data[63:32]  <= iData;
                    3'd3: in_data[31:0]   <= iData;
                    3'd4: Load_Data       <= 1'b1;
                    3'd5: Load_Key        <= 1'b1;
                endcase
            end
        end
    end

    // Combinational read response logic (no delay!)
    always @(*) begin
        if (~iChipSelect_n && ~iRead_n) begin
            case (iAddress)
                3'd0: oData = temp_result[127:96];
                3'd1: oData = temp_result[95:64];
                3'd2: oData = temp_result[63:32];
                3'd3: oData = temp_result[31:0];
                3'd4: oData = {31'd0, tmp_valid};
                3'd5: oData = {31'd0, Ready_new_input};
                default: oData = 32'd0;
            endcase
        end else begin
            oData = 32'd0;
        end
    end

endmodule
